package apr.learning.pattern.structural.bridge.info;

-------- BRIDGE PATTERN --------

#1- Intro
Este patrón pretende desacoplar una abstraccion de su implementación, para que los dos se puedan variar independientemente. Para ello pone, la abstraccion y la implementación en clases 
heredades diferentes de manera que ambos se puedan extender de forma independiente.
Los componentes con los que cuenta el patrón son: abstraccion, abstraccion redefinida, implementación e implementación concreta.

#2- Actores
	-Abstraccion, define la clase de abstraccion y también mantiene una referencia a un objeto de tipo implementador, este vínculo, entre la abstraccion y el implementador es conocido como puente.
	-Abstraccion redefinida, hereda la clase definida por la abstraccion. 
	-El implementador proporciona la interfaz para las clases de implementación (implementaciones concretas)
	-Y las implementaciones concretas implementa la interfaz implementadora y definen su implementación concreta.

Como resultado una implementación no está obligado permanentemente por una interfaz. La implementación de una abstraccion se puede configurar en tiempo de ejecución, también elimina las dependencias
en tiempo de compilación sobre la aplicación. 

#3- Cuando usar el patrón
	- Cuando se quiere evitar una unión permanente entre la abstraccion y su implementación. este podría ser el caso, cuando la implementación debe ser seleccionada o cambiada en tiempo de ejecución
	- Tanto las abstraccion y sus implementaciones deben ser extensibles para subclases, en este caso, el patrón le permite combinar diferentes abstracciones e implementaciones y extenderlas
	independientemente
	- Los cambios en la implementación de una abstraccion no deben tener ningún impacto en los clientes, es decir, su código no debería recompilarse.
	- Quieres compartir una implementación entre varios objetos (por referencia) y esto debe estar oculto para el cliente.
